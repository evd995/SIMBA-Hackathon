"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CluRecognizerOptions = void 0;
/* eslint-disable  @typescript-eslint/no-non-null-assertion */
/* eslint-disable  @typescript-eslint/no-explicit-any */
const botbuilder_1 = require("botbuilder");
const ms_rest_js_1 = require("@azure/ms-rest-js");
const cluConstants_1 = require("./cluConstants");
const cluRecognizerOptionsBase_1 = require("./cluRecognizerOptionsBase");
const cluExtensions_1 = require("./cluExtensions");
/**
 * Options for CluRecognizerOptions.
 */
class CluRecognizerOptions extends cluRecognizerOptionsBase_1.CluRecognizerOptionsBase {
    /**
     * Initializes a new instance of the CluRecognizerOptions class.
     * @param application The CLU application to use to recognize text.
     * @param fields The fields to load to the base class.
     */
    constructor(application, fields) {
        super(application, fields);
    }
    recognize(utteranceOrContext, activityOrHttpClient, httpClient) {
        if (typeof utteranceOrContext === 'string') {
            return this.recognizeWithUtterance(utteranceOrContext, activityOrHttpClient);
        }
        const [context, activity, client] = utteranceOrContext instanceof botbuilder_1.TurnContext
            ? [utteranceOrContext, utteranceOrContext.activity, httpClient]
            : [
                utteranceOrContext.context,
                activityOrHttpClient,
                httpClient,
            ];
        return this.recognizeWithTurnContext(context, activity.text, client);
    }
    recognizeWithTurnContext(turnContext, utterance, httpClient) {
        return __awaiter(this, void 0, void 0, function* () {
            let recognizerResult;
            let cluResponse = null;
            if (!(utterance === null || utterance === void 0 ? void 0 : utterance.trim())) {
                return { text: utterance, intents: {} };
            }
            else {
                cluResponse = yield this.getCluResponse(utterance, httpClient);
                recognizerResult = this.buildRecognizerResultFromCluResponse(cluResponse, utterance);
            }
            const traceInfo = {
                recognizerResult,
                cluModel: this.application.projectName,
                cluResult: cluResponse,
            };
            yield turnContext.sendTraceActivity(cluConstants_1.CluConstants.TraceOptions.ActivityName, traceInfo, cluConstants_1.CluConstants.TraceOptions.TraceType, cluConstants_1.CluConstants.TraceOptions.TraceLabel);
            return recognizerResult;
        });
    }
    recognizeWithUtterance(utterance, httpClient) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(utterance === null || utterance === void 0 ? void 0 : utterance.trim())) {
                return { text: utterance, intents: {} };
            }
            else {
                const cluResponse = yield this.getCluResponse(utterance, httpClient);
                return this.buildRecognizerResultFromCluResponse(cluResponse, utterance);
            }
        });
    }
    getCluResponse(utterance, httpClient) {
        return __awaiter(this, void 0, void 0, function* () {
            const uri = this.buildUri();
            const body = this.buildRequestBody(utterance);
            const headers = new ms_rest_js_1.HttpHeaders({
                'Content-Type': 'application/json',
                [cluConstants_1.CluConstants.RequestOptions.SubscriptionKeyHeaderName]: this.application
                    .endpointKey,
            });
            const resource = new ms_rest_js_1.WebResource(uri.href, 'POST', JSON.stringify(body), {}, headers);
            const response = yield httpClient.sendRequest(resource);
            return response.parsedBody;
        });
    }
    buildRequestBody(utterance) {
        return {
            kind: cluConstants_1.CluConstants.RequestOptions.Kind,
            analysisInput: {
                conversationItem: {
                    id: cluConstants_1.CluConstants.RequestOptions.ConversationItemId,
                    participantId: cluConstants_1.CluConstants.RequestOptions.ConversationItemParticipantId,
                    text: utterance,
                },
            },
            parameters: {
                projectName: this.application.projectName,
                deploymentName: this.application.deploymentName,
                stringIndexType: this.cluRequestBodyStringIndexType,
            },
        };
    }
    buildRecognizerResultFromCluResponse(cluResponse, utterance) {
        var _a;
        const prediction = (_a = cluResponse[cluConstants_1.CluConstants.ResponseOptions.ResultKey]) === null || _a === void 0 ? void 0 : _a[cluConstants_1.CluConstants.ResponseOptions.PredictionKey];
        const recognizerResult = {
            text: utterance,
            alteredText: utterance,
            intents: cluExtensions_1.CluExtensions.extractIntents(prediction),
            entities: cluExtensions_1.CluExtensions.extractEntities(prediction),
        };
        if (this.includeAPIResults) {
            recognizerResult[cluConstants_1.CluConstants.RecognizerResultResponsePropertyName] = cluResponse;
        }
        return recognizerResult;
    }
    buildUri() {
        const uri = new URL('/language/:analyze-conversations', this.application.endpoint);
        uri.searchParams.append('api-version', this.cluApiVersion);
        return uri;
    }
}
exports.CluRecognizerOptions = CluRecognizerOptions;
//# sourceMappingURL=cluRecognizerOptions.js.map