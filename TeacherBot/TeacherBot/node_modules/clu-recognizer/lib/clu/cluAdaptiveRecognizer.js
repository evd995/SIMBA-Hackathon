"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CluAdaptiveRecognizer = void 0;
const botbuilder_dialogs_1 = require("botbuilder-dialogs");
const adaptive_expressions_1 = require("adaptive-expressions");
const cluConstants_1 = require("../cluConstants");
const cluMainRecognizer_1 = require("./cluMainRecognizer");
const cluRecognizerOptions_1 = require("../cluRecognizerOptions");
const cluApplication_1 = require("../cluApplication");
const defaultHttpClientFactory_1 = require("../defaultHttpClientFactory");
/**
 * @inheritdoc
 * A CLU based implementation of the Recognizer class.
 */
class CluAdaptiveRecognizer extends botbuilder_dialogs_1.Recognizer {
    constructor() {
        super(...arguments);
        this._projectName = new adaptive_expressions_1.StringExpression();
        this._endpoint = new adaptive_expressions_1.StringExpression();
        this._endpointKey = new adaptive_expressions_1.StringExpression();
        this._deploymentName = new adaptive_expressions_1.StringExpression();
        this._logPersonalInformation = new adaptive_expressions_1.BoolExpression('=settings.runtimeSettings.telemetry.logPersonalInformation');
        this._includeAPIResults = new adaptive_expressions_1.BoolExpression();
        this._cluRequestBodyStringIndexType = new adaptive_expressions_1.StringExpression(cluConstants_1.CluConstants.RequestOptions.StringIndexType);
        this._cluApiVersion = new adaptive_expressions_1.StringExpression(cluConstants_1.CluConstants.RequestOptions.ApiVersion);
    }
    /**
     * Gets or sets the projectName of your Conversation Language Understanding service.
     * @returns The project name of your Conversation Language Understanding service.
     */
    get projectName() {
        return this._projectName.expressionText;
    }
    set projectName(value) {
        this._projectName = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * Gets or sets the endpoint for your Conversation Language Understanding service.
     * @returns The endpoint of your Conversation Language Understanding service.
     */
    get endpoint() {
        return this._endpoint.expressionText;
    }
    set endpoint(value) {
        this._endpoint = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * Gets or sets the endpointKey for your Conversation Language Understanding service.
     * @returns The endpoint key for your Conversation Language Understanding service.
     */
    get endpointKey() {
        return this._endpointKey.expressionText;
    }
    set endpointKey(value) {
        this._endpointKey = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * Gets or sets the deploymentName for your Conversation Language Understanding service.
     * @returns The deployment name for your Conversation Language Understanding service.
     */
    get deploymentName() {
        return this._deploymentName.expressionText;
    }
    set deploymentName(value) {
        this._deploymentName = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * Gets or sets the flag to determine if personal information should be logged in telemetry.
     * @returns The flag to indicate if personal information should be logged in telemetry.
     */
    get logPersonalInformation() {
        return this._logPersonalInformation.expressionText;
    }
    set logPersonalInformation(value) {
        this._logPersonalInformation = new adaptive_expressions_1.BoolExpression(value);
    }
    /**
     * Gets or sets a value indicating whether API results should be included.
     *
     * This is mainly useful for testing or getting access to CLU features not yet in the SDK.
     * @returns True to include API results.
     */
    get includeAPIResults() {
        return this._includeAPIResults.expressionText;
    }
    set includeAPIResults(value) {
        this._includeAPIResults = new adaptive_expressions_1.BoolExpression(value);
    }
    /**
     * Gets or sets a value indicating the string index type to include in the CLU request body.
     * @returns A value indicating the string index type to include in the CLU request body.
     */
    get cluRequestBodyStringIndexType() {
        return this._cluRequestBodyStringIndexType.expressionText;
    }
    set cluRequestBodyStringIndexType(value) {
        this._cluRequestBodyStringIndexType = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * Gets or sets a value indicating the CLU API version to use.
     *
     * This can be helpful combined with the includeAPIResults flag to get access to CLU features not yet in the SDK.
     * @returns A value indicating the CLU API version to use.
     */
    get cluApiVersion() {
        return this._cluApiVersion.expressionText;
    }
    set cluApiVersion(value) {
        this._cluApiVersion = new adaptive_expressions_1.StringExpression(value);
    }
    /**
     * @inheritdoc
     */
    recognize(dialogContext, activity, telemetryProperties, telemetryMetrics) {
        return __awaiter(this, void 0, void 0, function* () {
            const recognizer = new cluMainRecognizer_1.CluMainRecognizer(this.recognizerOptions(dialogContext), new defaultHttpClientFactory_1.DefaultHttpClientFactory(dialogContext.context).create());
            const result = yield recognizer.recognize(dialogContext, activity);
            this.trackRecognizerResult(dialogContext, cluConstants_1.CluConstants.TrackEventOptions.RecognizerResultEventName, this.fillRecognizerResultTelemetryProperties(result, telemetryProperties !== null && telemetryProperties !== void 0 ? telemetryProperties : {}, dialogContext), telemetryMetrics);
            return result;
        });
    }
    /**
     * Construct recognizer options from the current dialog context.
     * @param dialogContext The current dialog context.
     * @returns CLU Recognizer options.
     */
    recognizerOptions(dialogContext) {
        const application = new cluApplication_1.CluApplication(this._projectName.getValue(dialogContext.state), this._endpointKey.getValue(dialogContext.state), this._endpoint.getValue(dialogContext.state), this._deploymentName.getValue(dialogContext.state));
        return new cluRecognizerOptions_1.CluRecognizerOptions(application, {
            telemetryClient: this.telemetryClient,
            logPersonalInformation: this._logPersonalInformation.getValue(dialogContext.state),
            includeAPIResults: this._includeAPIResults.getValue(dialogContext.state),
            cluRequestBodyStringIndexType: this._cluRequestBodyStringIndexType.getValue(dialogContext.state),
            cluApiVersion: this._cluApiVersion.getValue(dialogContext.state),
        });
    }
    /**
     * @inheritdoc
     */
    fillRecognizerResultTelemetryProperties(recognizerResult, telemetryProperties, dialogContext) {
        var _a, _b, _c, _d, _e, _f;
        // Get top two intents.
        const [firstIntent, secondIntent] = Object.entries(recognizerResult.intents)
            .map(([intent, { score = 0 }]) => ({ intent, score }))
            .sort((a, b) => b.score - a.score);
        // Add the intent score and conversation id properties
        const properties = {
            [cluConstants_1.CluConstants.Telemetry.ProjectNameProperty]: this._projectName.value,
            [cluConstants_1.CluConstants.Telemetry.IntentProperty]: (_a = firstIntent === null || firstIntent === void 0 ? void 0 : firstIntent.intent) !== null && _a !== void 0 ? _a : '',
            [cluConstants_1.CluConstants.Telemetry
                .IntentScoreProperty]: firstIntent === null || firstIntent === void 0 ? void 0 : firstIntent.score.toLocaleString('en-US'),
            [cluConstants_1.CluConstants.Telemetry.Intent2Property]: (_b = secondIntent === null || secondIntent === void 0 ? void 0 : secondIntent.intent) !== null && _b !== void 0 ? _b : '',
            [cluConstants_1.CluConstants.Telemetry
                .IntentScore2Property]: secondIntent === null || secondIntent === void 0 ? void 0 : secondIntent.score.toLocaleString('en-US'),
            [cluConstants_1.CluConstants.Telemetry.FromIdProperty]: (_d = (_c = dialogContext.context.activity) === null || _c === void 0 ? void 0 : _c.from) === null || _d === void 0 ? void 0 : _d.id,
        };
        if (!recognizerResult.entities) {
            properties[cluConstants_1.CluConstants.Telemetry.EntitiesProperty] =
                recognizerResult.entities;
        }
        // Use the LogPersonalInformation flag to toggle logging PII data, text is a common example.
        if (this.logPersonalInformation &&
            !((_f = (_e = dialogContext.context.activity) === null || _e === void 0 ? void 0 : _e.text) === null || _f === void 0 ? void 0 : _f.trim())) {
            properties[cluConstants_1.CluConstants.Telemetry.QuestionProperty] =
                dialogContext.context.activity.text;
        }
        // Additional Properties can override "stock" properties.
        if (telemetryProperties != null) {
            return Object.assign({}, properties, telemetryProperties);
        }
        return properties;
    }
}
exports.CluAdaptiveRecognizer = CluAdaptiveRecognizer;
/**
 * The declarative type for this recognizer.
 */
CluAdaptiveRecognizer.$kind = 'Microsoft.CluRecognizer';
//# sourceMappingURL=cluAdaptiveRecognizer.js.map