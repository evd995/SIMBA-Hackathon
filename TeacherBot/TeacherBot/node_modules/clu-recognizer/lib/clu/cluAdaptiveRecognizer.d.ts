import { Activity, RecognizerResult } from 'botbuilder';
import { DialogContext, Recognizer } from 'botbuilder-dialogs';
import { CluRecognizerOptions } from '../cluRecognizerOptions';
/**
 * @inheritdoc
 * A CLU based implementation of the Recognizer class.
 */
export declare class CluAdaptiveRecognizer extends Recognizer {
    private _projectName;
    private _endpoint;
    private _endpointKey;
    private _deploymentName;
    private _logPersonalInformation;
    private _includeAPIResults;
    private _cluRequestBodyStringIndexType;
    private _cluApiVersion;
    /**
     * The declarative type for this recognizer.
     */
    static readonly $kind: string;
    /**
     * Gets or sets the projectName of your Conversation Language Understanding service.
     * @returns The project name of your Conversation Language Understanding service.
     */
    get projectName(): string;
    set projectName(value: string);
    /**
     * Gets or sets the endpoint for your Conversation Language Understanding service.
     * @returns The endpoint of your Conversation Language Understanding service.
     */
    get endpoint(): string;
    set endpoint(value: string);
    /**
     * Gets or sets the endpointKey for your Conversation Language Understanding service.
     * @returns The endpoint key for your Conversation Language Understanding service.
     */
    get endpointKey(): string;
    set endpointKey(value: string);
    /**
     * Gets or sets the deploymentName for your Conversation Language Understanding service.
     * @returns The deployment name for your Conversation Language Understanding service.
     */
    get deploymentName(): string;
    set deploymentName(value: string);
    /**
     * Gets or sets the flag to determine if personal information should be logged in telemetry.
     * @returns The flag to indicate if personal information should be logged in telemetry.
     */
    get logPersonalInformation(): string | boolean;
    set logPersonalInformation(value: string | boolean);
    /**
     * Gets or sets a value indicating whether API results should be included.
     *
     * This is mainly useful for testing or getting access to CLU features not yet in the SDK.
     * @returns True to include API results.
     */
    get includeAPIResults(): string | boolean;
    set includeAPIResults(value: string | boolean);
    /**
     * Gets or sets a value indicating the string index type to include in the CLU request body.
     * @returns A value indicating the string index type to include in the CLU request body.
     */
    get cluRequestBodyStringIndexType(): string;
    set cluRequestBodyStringIndexType(value: string);
    /**
     * Gets or sets a value indicating the CLU API version to use.
     *
     * This can be helpful combined with the includeAPIResults flag to get access to CLU features not yet in the SDK.
     * @returns A value indicating the CLU API version to use.
     */
    get cluApiVersion(): string;
    set cluApiVersion(value: string);
    /**
     * @inheritdoc
     */
    recognize(dialogContext: DialogContext, activity: Activity, telemetryProperties?: Record<string, string>, telemetryMetrics?: Record<string, number>): Promise<RecognizerResult>;
    /**
     * Construct recognizer options from the current dialog context.
     * @param dialogContext The current dialog context.
     * @returns CLU Recognizer options.
     */
    recognizerOptions(dialogContext: DialogContext): CluRecognizerOptions;
    /**
     * @inheritdoc
     */
    protected fillRecognizerResultTelemetryProperties(recognizerResult: RecognizerResult, telemetryProperties: Record<string, string>, dialogContext: DialogContext): Record<string, string>;
}
