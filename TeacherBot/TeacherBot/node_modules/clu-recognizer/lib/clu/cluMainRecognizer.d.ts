import { TurnContext, Activity, RecognizerResult, BotTelemetryClient } from 'botbuilder';
import { CluRecognizerOptionsBase } from '../cluRecognizerOptionsBase';
import { HttpClient } from '@azure/ms-rest-js';
import { DialogContext } from 'botbuilder-dialogs';
/**
 * A CLU based implementation.
 */
export declare class CluMainRecognizer {
    private readonly recognizerOptions;
    private readonly httpClient;
    private readonly cacheKey;
    /**
     * Gets or sets a value indicating whether to log personal information that came from the user to telemetry.
     * @returns If true, personal information is logged to Telemetry; otherwise the properties will be filtered.
     */
    logPersonalInformation: boolean;
    /**
     * Gets the currently configured BotTelemetryClient that logs the CluResult event.
     * @returns The BotTelemetryClient being used to log events.
     */
    telemetryClient: BotTelemetryClient;
    /**
     * Initializes a new instance of the CluMainRecognizer class.
     * @param recognizerOptions The CLU recognizer version options.
     * @param httpClient The HttpClient for the CLU API calls.
     */
    constructor(recognizerOptions: CluRecognizerOptionsBase, httpClient: HttpClient);
    /**
     * Return results of the analysis (Suggested actions and intents).
     *
     * No telemetry is provided when using this method.
     * @param utterance The utterance to recognize.
     * @param recognizerOptions A CluRecognizerOptionsBase instance to be used by the call.
     * This parameter overrides the default CluRecognizerOptionsBase passed in the constructor.
     * @returns The CLU results of the analysis of the current message text in the current turn's context activity.
     */
    recognize(utterance: string, recognizerOptions?: CluRecognizerOptionsBase): Promise<RecognizerResult>;
    /**
     * Return results of the analysis (Suggested actions and intents).
     * @param turnContext Context object containing information for a single turn of conversation with a user.
     * @param recognizerOptions A CluRecognizerOptionsBase instance to be used by the call.
     * This parameter overrides the default CluRecognizerOptionsBase passed in the constructor.
     * @param telemetryProperties Additional properties to be logged to telemetry with the CluResult event.
     * @param telemetryMetrics Additional metrics to be logged to telemetry with the CluResult event.
     * @returns The CLU results of the analysis of the current message text in the current turn's context activity.
     */
    recognize(turnContext: TurnContext, recognizerOptions?: CluRecognizerOptionsBase, telemetryProperties?: Record<string, string>, telemetryMetrics?: Record<string, number>): Promise<RecognizerResult>;
    /**
     * Return results of the analysis (Suggested actions and intents).
     * @param dialogContext Context object containing information for a single turn of conversation with a user.
     * @param activity Activity to recognize.
     * @param recognizerOptions A CluRecognizerOptionsBase instance to be used by the call.
     * This parameter overrides the default CluRecognizerOptionsBase passed in the constructor.
     * @param telemetryProperties Additional properties to be logged to telemetry with the CluResult event.
     * @param telemetryMetrics Additional metrics to be logged to telemetry with the CluResult event.
     * @returns The CLU results of the analysis of the current message text in the current turn's context activity.
     */
    recognize(dialogContext: DialogContext, activity: Activity, recognizerOptions?: CluRecognizerOptionsBase, telemetryProperties?: Record<string, string>, telemetryMetrics?: Record<string, number>): Promise<RecognizerResult>;
    /**
     * Invoked prior to a CluResult being logged.
     * @param recognizerResult The CLU results for the call.
     * @param turnContext Context object containing information for a single turn of conversation with a user.
     * @param telemetryProperties Additional properties to be logged to telemetry with the CluResult event.
     * @param telemetryMetrics Additional metrics to be logged to telemetry with the CluResult event.
     */
    protected onRecognizerResult(recognizerResult: RecognizerResult, turnContext: TurnContext, telemetryProperties?: Record<string, string>, telemetryMetrics?: Record<string, number>): void;
    /**
     * Fills the event properties for CluResult event for telemetry.
     * These properties are logged when the recognizer is called.
     * @param recognizerResult Last activity sent from user.
     * @param turnContext Context object containing information for a single turn of conversation with a user.
     * @param telemetryProperties Additional properties to be logged to telemetry with the CluResult event.
     * @returns A dictionary that is sent as "Properties" to BotTelemetryClient.trackEvent method for the BotMessageSend event.
     */
    protected fillCluEventProperties(recognizerResult: RecognizerResult, turnContext: TurnContext, telemetryProperties?: Record<string, string>): Record<string, string>;
    /**
     * Returns a RecognizerResult object.
     * @param utterance The utterance to recognize.
     * @param predictionOptions CluRecognizerOptions implementation to override current properties.
     * @returns RecognizerResult object.
     */
    private recognizeWithUtterance;
    /**
     * Returns a RecognizerResult object.
     * @param context The current dialog context or turn context.
     * @param activity The activity to recognize.
     * @param predictionOptions CluRecognizerOptions implementation to override current properties.
     * @param telemetryProperties Additional properties to be logged to telemetry with the CluResult event.
     * @param telemetryMetrics Additional metrics to be logged to telemetry with the CluResult event.
     * @returns RecognizerResult object.
     */
    private recognizeWithContext;
}
