"use strict";
// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.CluRecognizerOptionsBase = void 0;
const botbuilder_1 = require("botbuilder");
const cluConstants_1 = require("./cluConstants");
/**
 * CLU Recognizer Options.
 */
class CluRecognizerOptionsBase {
    /**
     * Initializes a new instance of the CluRecognizerOptionsBase class.
     * @param application An instance of CluApplication.
     * @param fields The fields to load to the base class.
     */
    constructor(application, fields) {
        var _a, _b, _c, _d, _e;
        /**
         * Gets or sets the time in milliseconds to wait before the request times out.
         * @returns The time in milliseconds to wait before the request times out. Default is 100000 milliseconds.
         */
        this.timeout = cluConstants_1.CluConstants.HttpClientOptions.Timeout;
        /**
         * Gets or sets a value indicating whether to log personal information that came from the user to telemetry.
         * @returns If true, personal information is logged to Telemetry; otherwise the properties will be filtered.
         */
        this.logPersonalInformation = false;
        /**
         * Gets or sets a value indicating whether flag to indicate if full results from the CLU API should be returned with the recognizer result.
         * @returns A value indicating whether full results from the CLU API should be returned with the recognizer result.
         */
        this.includeAPIResults = false;
        if (!application) {
            throw new Error();
        }
        this._application = application;
        this.telemetryClient = (_a = fields === null || fields === void 0 ? void 0 : fields.telemetryClient) !== null && _a !== void 0 ? _a : new botbuilder_1.NullTelemetryClient();
        this.logPersonalInformation = (_b = fields === null || fields === void 0 ? void 0 : fields.logPersonalInformation) !== null && _b !== void 0 ? _b : false;
        this.includeAPIResults = (_c = fields === null || fields === void 0 ? void 0 : fields.includeAPIResults) !== null && _c !== void 0 ? _c : false;
        this.cluRequestBodyStringIndexType =
            (_d = fields === null || fields === void 0 ? void 0 : fields.cluRequestBodyStringIndexType) !== null && _d !== void 0 ? _d : cluConstants_1.CluConstants.RequestOptions.StringIndexType;
        this.cluApiVersion =
            (_e = fields === null || fields === void 0 ? void 0 : fields.cluApiVersion) !== null && _e !== void 0 ? _e : cluConstants_1.CluConstants.RequestOptions.ApiVersion;
    }
    /**
     * Gets the CLU application used to recognize text.
     * @returns The CLU application to use to recognize text.
     */
    get application() {
        return this._application;
    }
}
exports.CluRecognizerOptionsBase = CluRecognizerOptionsBase;
//# sourceMappingURL=cluRecognizerOptionsBase.js.map